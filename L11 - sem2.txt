/*
Croitoru Rares, 21.05.2021, grupa 2011
Lab 11 - 1.În cazul exemplului 2(care exemplifică moştenirea simplă, cu clasa de bază Pozitie
şi derivată Punct) se cer următoarele:
a.urmariţi şi verificaţi ordinea de apel pentru constructori/destructori
b.extindeţi funcţia main()pentru a utilizatoate metodele din clasa de baza şi din clasa derivată
c.introduceţi o nouă clasă Cerc(date şi metode), derivată din clasa Pozitie
d.scrieţi un program ce utilizează aceste clase.
*/

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>

using namespace std;

class Pozitie {
protected:
	int x, y;
public:
	Pozitie(int = 0, int = 0);
	Pozitie(const Pozitie&);
	~Pozitie();
	virtual void afisare();
	virtual void deplasare(int, int);
};

Pozitie::Pozitie(int abs, int ord)
{
	x = abs; y = ord;
	cout << "Constructor CB \"Pozitie\", ";
	afisare();
}

Pozitie::Pozitie(const Pozitie& p)
{
	x = p.x;
	y = p.y;
	cout << "Constructor de copiere CB \"Pozitie\", ";
	afisare();
}

Pozitie::~Pozitie()
{
	cout << "Destructor CB \"Pozitie \", ";
	afisare();
}

void Pozitie::afisare()
{
	cout << " CB afisare: coordonate: x = " << x << ", y = " << y << "\n";
}

void Pozitie::deplasare(int dx, int dy)
{
	cout << "CB: deplasare" << endl;
	x += dx; y += dy;
}

class Punct : public Pozitie {
	int vizibil;
	char culoare;
public:
	Punct(int = 0, int = 0, char = 'A');
	Punct(const Punct&);
	~Punct();
	void arata() {
		vizibil = 1;
	}
	void ascunde() {
		vizibil = 0;
	}
	void coloreaza(char c) {
		culoare = c;
	}
	void deplasare(int, int);
	void afisare();
};

Punct::Punct(int abs, int ord, char c) :Pozitie(abs, ord)
{
	vizibil = 0;
	culoare = c;
	cout << "Constructor CD \"Punct\", ";
	afisare();
}

Punct::Punct(const Punct& p) :Pozitie(p.x, p.y)
{
	vizibil = p.vizibil;
	culoare = p.culoare;
	cout << "Constructor de copiere CD \"Punct\", ";
	afisare();
}

Punct::~Punct()
{
	cout << "Destructor CD \"Punct\", ";
	afisare();
}

void Punct::afisare()
{
	cout << "CD afisare: Pozitie: x = " << x << ", y = " << y;
	cout << ", culoare: " << culoare;
	if (vizibil)
		cout << ", vizibil \n";
	else
		cout << ", invizibil \n";
}

void Punct::deplasare(int dx, int dy)
{
	if (vizibil) {
		cout << " CD: Deplasare: ";
		afisare();
	}
	x += dx;
	y += dy;
	if (vizibil) {
		cout << "la coordonatele: ";
		Pozitie::afisare();
	}
}

class Cerc :public Pozitie {
	int raza, vizibil;
	char culoare;
public:
	Cerc(int = 0, int = 0, int = 0);
	Cerc(Cerc&);
	~Cerc();
	void arata() {
		vizibil = 1;
	}
	void ascunde() {
		vizibil = 0;
	}
	void coloreaza(char c) {
		culoare = c;
	}
	void deplasare(int, int);
	void afisare();
};

Cerc::Cerc(int abs, int ord, int r) :Pozitie(abs, ord) {
	cout << "\n Apelare constructor cerc:\n";
	raza = r;
	vizibil = 1;
	culoare = 'G';
	afisare();
}

Cerc::Cerc(Cerc& p) :Pozitie(p.x, p.y) {
	vizibil = p.vizibil;
	culoare = p.culoare;
	cout << "\nConstructor de copiere \"Cerc\", \n";
	afisare();
}

Cerc::~Cerc() {
	cout << "\nApelare destructor \"Cerc\"\n";
	afisare();
}

void Cerc::afisare() {
	cout << "\nPozitie centru cerc : \n " << "x = " << x << ", y = " << y;
	cout << "\n culoare: " << culoare;
	if (vizibil)
		cout << ", vizibil \n";
	else
		cout << ", invizibil \n";
}

void Cerc::deplasare(int a, int b) {
	if (vizibil)
	{
		cout << "\nDeplasare: ";
		afisare();
	}
	x += a;
	y += b;
	if (vizibil)
	{
		cout << "la coordonatele: ";
		Pozitie::afisare();
	}
}

int main()
{
	Pozitie pp0(7, 7);
	cout << "\n Metode Clasa de Baza \n";
	pp0.afisare();
	pp0.deplasare(6, 9);
	pp0.afisare();
	cout << "\n Metode Clasa Dervivata \n";
	Punct p0(1, 1, 'V');
	p0.afisare();
	Punct p1(p0);
	p1.arata();
	p1.deplasare(10, 10);
	cout << "\nUpcasting - obiecte:\n";
	pp0 = p0;
	pp0.afisare();
	cout << "\nUpcasting - pointeri:\n ";
	Pozitie* p;
	p = new Punct(100, 100, 'Z');//derived object to the base class pointer(dynamically allocated)
								 //cout<<"\nAfisare CB: \n"; non virtual
	cout << "\nAfisare CD: derived class object if virtual, else base class CB \n";
	p->afisare();
	p = &pp0;

	cout << "\nAfisare CB: base class object always\n";
	p->afisare();
	p = &p1;
	//cout<<"\nAfisare CB: \n"; non virtual

	cout << "\nAfisare CD: derived class object if virtual, else base class CB \n";
	p->afisare();
	Punct* pp;
	pp = &p1;
	cout << "\nAfisare CD: derived class object always\n";
	pp->afisare();
	cout << "\nAfisare CB: derived object displayed with base class method always\n";
	pp->Pozitie::afisare();
	cout << "\nDowncasting:\n ";
	Punct* pdown;
	pdown = (Punct*)&pp0;
	cout << "\nAfisare CB: base class object using a derived pointer, else derived class CD \n";
	pdown->afisare();
	pdown = (Punct*)p;//downcasting by derived class object
	cout <<"\n Afisare din Derivat, Punct"<<endl;
	pdown->afisare();
	Cerc C1(7, 4, 2);
	Cerc C2(C1);
	C1.afisare();
	cout << endl;
	C1.deplasare(4, 3);
	C1.afisare();
	cout << endl;
	C2.coloreaza('S');
	C2.arata();
	cout << endl;
	C1.ascunde();
	C1.afisare();
	C1.arata();
	C1.afisare();
	return 0;
}

/*
Croitoru Rares, 21.05.2021, grupa 2011
Lab 11 - 2.La exemplul al treilea extindeţi clasa de bază cu alte metode virtuale, 
redefinite în clasele derivate, cum ar fi metode get()şi set()pentru greutatea 
vehiculului (variabila greutate).
*/

#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
using namespace std;

class Vehicul {
	int roti;

public:
	float greutate;
	virtual void mesaj(void)
	{
		cout << "Mesaj din clasa Vehicul\n";
	};
	virtual float get_val(float) { return greutate; };
	virtual void set_val(float ngreutate) { greutate = ngreutate; };
};//clasa de baza


class Automobil : public Vehicul {
	int incarcatura_pasageri;
public:
	void mesaj(void)
	{
		cout << "Mesaj din clasa Automobil\n";
	}
	float get_val(float) {

		return (greutate * 2);
	}
	void set_val(float ngreutate) { greutate = ngreutate; }
};


class Camion : public Vehicul {
	int incarcatura_pasageri;
	float incarcatura_utila;
public:
	int pasageri(void)
	{
		return incarcatura_pasageri;
	}

};


class Barca : public Vehicul {
	int incarcatura_pasageri;
public:
	int pasegeri(void)
	{
		return incarcatura_pasageri;
	}
	void mesaj(void)
	{
		cout << "Mesaj din clasa Barca\n";
	}
	float get_val(float) { return (3 * greutate); }
	void set_val(float ngreutate) { greutate = ngreutate; }
};


int main()
{
	// apel direct, prin intermediul unor obiecte specifice
	Vehicul monocicleta;
	Automobil ford;
	Camion semi;
	Barca barca_de_pescuit;

	monocicleta.mesaj();
	ford.mesaj();
	semi.mesaj();//din Vehicul ca si CB
	barca_de_pescuit.mesaj();

	cout << "\n";
	cout.setf(ios::dec);
	cout << "\nGreutatea motocicletei: " << monocicleta.get_val(6.5);
	cout.unsetf(ios::dec);
	cout << "\nGreutatea fordului:" << ford.get_val(2);
	cout << "\nGreutatea camion:" << semi.get_val(7);//din Vehicul ca si CB
	cout << "\nGreutatea barcii:" << barca_de_pescuit.get_val(1);
	cout << "\n";

	// apel prin intermediul unui pointer specific
	Vehicul* pmonocicleta;
	Automobil* pford;
	Camion* psemi;
	Barca* pbarca_de_pescuit;

	cout << "\n";
	pmonocicleta = &monocicleta;
	pmonocicleta->mesaj();
	pford = &ford;
	pford->mesaj();
	psemi = &semi;
	psemi->mesaj();//din CB
	pbarca_de_pescuit = &barca_de_pescuit;
	pbarca_de_pescuit->mesaj();

	// apel prin intermediul unui pointer catre un obiect al clasei de baza
	cout << "\n";
	pmonocicleta = &monocicleta;
	pmonocicleta->mesaj();//Vehicul
	pmonocicleta = &ford;//upcasting
	pmonocicleta->mesaj();//Automobil
	pmonocicleta = &semi;//upcasting
	pmonocicleta->mesaj();//Vehicul
	pmonocicleta = &barca_de_pescuit;//upcasting
	pmonocicleta->mesaj();//Barca
	return 0;
}

/*
Croitoru Rares, 21.05.2021, grupa 2011
Lab 11 - 3.Să se scrie un program C++ în care se defineşte o clasă Militar cu o metodă
publică virtuală sunt_militar()care indică apartenenţa la armată. Derivaţi clasa Militar
pentru a crea clasaSoldatşi clasa Ofiter. Derivaţi mai departe clasa Ofiter pentru a 
obtine clasele Locotenent, Colonel,Capitan, General. Redefinitimetoda sunt_militar()
pentru a indica gradulmilitar pentrufiecare clasa specifica. Instantiati fiecare clasa 
Soldat, Locotenent,...,General, si apelati metoda sunt_militar().
*/

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
using namespace std;

class Militar
{
public:
	virtual void sunt_militar() {}
};

class Ofiter : public Militar
{
public:
	void sunt_militar()
	{
		cout << "\nsunt un Ofiter!";
	}
};

class Soldat : public Militar
{
public:
	void sunt_militar()
	{
		cout << "\nsunt un soldier!";
	}
};

class Locotenent : public Ofiter
{
public:
	void sunt_militar()
	{
		cout << "\nsunt un Locotenent!";
	}
};

class Capitan : public Ofiter
{
public:
	void sunt_militar()
	{
		cout << "\nsunt un Capitan!";
	}
};

class Colonel : public Ofiter
{
public:
	void sunt_militar()
	{
		cout << "\nsunt un Colonel!";
	}
};

class General : public Ofiter
{
public:
	void sunt_militar()
	{
		cout << "\nsunt un General!";
	}
};

int main()
{
	Soldat soldat1;
	soldat1.sunt_militar();

	Ofiter ofiter1;
	ofiter1.sunt_militar();

	General general1;
	general1.sunt_militar();

	Locotenent locotenent1;
	locotenent1.sunt_militar();

	Capitan capitan1;
	capitan1.sunt_militar();

	Colonel colonel1;
	colonel1.sunt_militar();
	return 0;
}

/*
Croitoru Rares, 21.05.2021, grupa 2011
Lab 11 - 4.Declarati o clasa Animal, care va contine o metoda pur virtuala, respira()si doua metode
virtuale manaca()si doarme(). Derivati in mod public o clasa Cainesi alta Peste, care vor defini 
metoda pur virtuala, iar clasa Caineva redefinimetoda mananca(),iar Pestemetoda doarme(). 
Instantiati obiecte din cele doua clase si apelati metodele specifice. Definiti apoi un tablou 
de tip Animal,care va contine obiecte din clasele derivate,daca e posibil. Daca nu, gasiti o 
solutie adecvata.
*/

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>

using namespace std;

class Animal
{
public:
	
	virtual void doarme()
	{
		cout << "\nAnimalul doarme!";
	}
	virtual void mananca()
	{
		cout << "\nAnimalul mananca!";
	}
	virtual void respira() = 0;
};

class Peste : public Animal
{
public:
	void doarme()
	{
		cout << "\nPestele doarme!";
	}
	void respira()
	{
		cout << "\nPestele respira!";
	}
	
};

class Caine : public Animal
{
public:
	void mananca()
	{
		cout << "\nCainele mananca!";
	}
	void respira()
	{
		cout << "\nCainele respira!";
	}
	
};

int main()
{
	Caine caine1;
	caine1.respira();
	caine1.mananca();
	Peste peste1;
	peste1.respira();
	peste1.doarme();
	Animal* sir1 = new Caine[5];
	Animal* sir2 = new Peste[5];
	delete[]sir1;
	delete[]sir2;
	return 0;
}

/*
Croitoru Rares, 21.05.2021, grupa 2011
Lab 11 - 5.Definiti o clasa abstracta care contine 3 declaratii de metode pur virtuale 
pentru concatenarea,intreteserea a doua siruri de caractere si inversarea unui sir de 
caractere primit ca parametru. O subclasa  implementeaza  corpurilemetodelor  declarate
in  clasa  de  baza.  Instantiati  clasaderivata  si  afisati  rezultatele  aplicarii 
operatiilor  implementate  in  clasa  asupra  unor  siruri  de caractere  citite  de 
la  tastatura.  Examinati  eroarea  data  de incercarea  de  a  instantia  clasa  de baza. 
*/

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string.h>

using namespace std;

const int DIM = 30;

class Baza {
public:
	virtual char* inversare(char* sir1) = 0;
	virtual char* concatenare(char* sir2, char* sir3) = 0;
};

class Derivata : public Baza {
public:
	char* sir1 = new char[DIM];
	char* sir2 = new char[DIM];
	char* sir3 = new char[DIM];

	char* inversare(char* sir1) {
		char* sir4 = new char[DIM];
		strcpy(sir4, sir1);
		_strrev(sir4);
		return sir4;
	}

	char* concatenare(char* sir2, char* sir3) {
		char* sir4 = new char[DIM];
		strcpy(sir4, sir2);
		strcat(sir4, sir3);
		return sir4;
	}


	~Derivata() {
		delete[]sir1;
		delete[]sir2;
		delete[]sir3;
	}
};

int main() 
{
	Derivata obiect1;
	cout << "sir1: ";
	char* str1 = new char[DIM];
	cin >> str1;

	cout << "sir2: ";
	char* str2 = new char[DIM];
	cin >> str2;

	cout << "\nconcatenate: " << obiect1.concatenare(str1, str2);
	cout << "\nsir1 invers: " << obiect1.inversare(str1);
	cout << "\nsir2 invers: " << obiect1.inversare(str2);

	return 0;
}