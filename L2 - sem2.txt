/*
Croitoru Rares, 07.03.2021, grupa 2011
Lab 2 - 1.Construiţi o funcţie recursivă care calculează aranjamente, unde n, k sunt citite de la tastatură. 
Verificati rezultatul folosind si metoda bazata pe factorial.
*/

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

long factorial(int n);
long aranjamente(int n, int k);

int main()
{
	int n, k;
	puts("\n\nCALCULAM ARANJAMENTE DE N LUATE CATE K\n\n");
	puts("\nn= ");
	scanf_s("%d", &n);
	puts("\nk= ");
	scanf_s("%d", &k);
	printf("\nRezultatul, recursiv, este:\n%ld\n", aranjamente(n, k));
	printf("\nRezultatul, calculat folosind factorial, este:\n%ld\n", factorial(n) / factorial(n - k));
	return 0;
}

long factorial(int n)
{
	long fact = 1;
	for (int i = 1; i <= n; i++)
		fact *= i;
	return fact;
}

long aranjamente(int n, int k)
{
	if (n > 0 && k > 0)
	return n * aranjamente(n - 1, k - 1);
	return 1;
}

/*
Croitoru Rares, 07.03.2021, grupa 2011
Lab 2 - 2.Calculati knC, n si k fiind preluate de la tastatura, utilizând o funcţie recursivă. 
Verificati rezultatul folosind si metoda bazata pe factorial.
*/

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

long factorial(int n);
double fcombinari(int n, int k);
long combinari(int n, int k);

int main()
{
	int n, k;
	puts("\n\nCALCULAM COMBINARI DE N LUATE CATE K\n\n");
	puts("\nn= ");
	scanf_s("%d", &n);
	puts("\nk= ");
	scanf_s("%d", &k);
	printf("\nRezultatul, recursiv, dupa formula cu suma combinarilor, este:\n%ld\n", combinari(n, k));
	printf("\nRezultatul, recursiv, dupa formula din cerinta, este:\n%.0lf\n", fcombinari(n, k));
	printf("\nRezultatul, calculat folosind factorial, este:\n%ld\n",\
		factorial(n) / (factorial(n - k) * factorial(k)));
	return 0;
}

long factorial(int n)
{
	long fact = 1;
	for (int i = 1; i <= n; i++)
		fact *= i;
	return fact;
}

double fcombinari(int n, int k)
{
	if (n > 0 && k > 0 && n != k)
		return ((double)n / (n - k)) * combinari(n - 1, k);
	return 1;
}

long combinari(int n, int k)
{
	if (n > 0 && k > 0 && n != k)
		return combinari(n - 1, k - 1) + combinari(n - 1, k);
	return 1;
}

/*
Croitoru Rares, 07.03.2021, grupa 2011
Lab 2 - 3.Calculul celui mai maredivizor comun a două numere folosind o funcţie recursivă.
*/

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int cmmdc(int a, int b);

int main()
{
	int a, b;
	puts("\nIntroduceti cele 2 numere.\n");
	scanf_s("%d%d", &a, &b);
	printf("\nCMMDC al celor 2 numere, implementat recursiv, este %d\n", cmmdc(a, b));
	return 0;
}

int cmmdc(int a, int b)
{
	if (a != b)
		if (a > b)
			return cmmdc(a - b, b);
		else
			return cmmdc(a, b - a);
	return a;
}

/*
Croitoru Rares, 07.03.2021, grupa 2011
Lab 2 - 4.Se consideră recursivitatea(seria de medii arimetico-geometrice a lui Gauss):
an=(an-1+bn-1)/2 şi bn=sqrt(an-1*bn-1), determinaţi anşi bn, pentru n, a0, b0 introduse de la tastatură.
*/

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <math.h>

double an(int a0, int b0, int n);
double bn(int a0, int b0, int n);

int main()
{
	int n, a0, b0;
	puts("\nn= ");
	scanf_s("%d", &n);
	puts("\na0= ");
	scanf_s("%d", &a0);
	puts("\nb0= ");
	scanf_s("%d", &b0);
	printf("\na[%d]= %lf\n", n, an(a0, b0, n));
	printf("\nb[%d]= %lf\n", n, bn(a0, b0, n));
	return 0;
}

double an(int a0, int b0, int n)
{
	if (n > 0)
		return (an(a0, b0, n - 1) + bn(a0, b0, n - 1)) / 2.0;
	return a0;
}

double bn(int a0, int b0, int n)
{
	if (n > 0)
		return sqrt(an(a0, b0, n - 1) * bn(a0, b0, n - 1));
	return b0;
}

/*
Croitoru Rares, 07.03.2021, grupa 2011
Lab 2 - 5.Citiţi un şir de caractere de la tastatură, caractercu caracter, cu ajutorul unei funcţi 
bazate pe caracter. Afişaţi şirul  în ordine inversă folosind o funcţie recursivă.
*/

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <conio.h>
#include <string.h>

const int MAX = 255;

void inversare(char sir[MAX], unsigned int n, unsigned int len);
void citire(char sir[MAX]);

int main()
{
	char sir[MAX] = "";
	puts("\nIntroduceti caractere si va opriti cu ESCAPE.\n");
	citire(sir);
	unsigned int len = strlen(sir);
	printf("\nSirul initial este: %s\n", sir);
	inversare(sir, len, len);
	printf("\nSirul inversat este: %s\n", sir);
	return 0;
}

void citire(char sir[MAX])
{
	char c[2];
	c[1] = '\0';
	fflush(stdin);
	c[0] = _getch();
	if (c[0] == 0x1B) // escape // acelasi lucru cu 27
		return;
	strcat(sir, c);
	citire(sir);
}

void inversare(char sir[MAX], unsigned int n, unsigned int len)
{
	if (n > strlen(sir) / 2)
	{
		char c = sir[n-1];
		sir[n-1] = sir[strlen(sir) - n];
		sir[strlen(sir) - n] = c;
		inversare(sir, n - 1, len);
	}
	return;
}

/*
Croitoru Rares, 07.03.2021, grupa 2011
Lab 2 - 6.Determinaţi printr-o funcţie recursivă produsul scalar aldoi vectori
(tablouri unidimensionalede aceiasi lungime).
*/

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int produs_scalar(int a[50], int b[50], int n);
void citire(int n, int v[50]);

int main()
{
	int n, a[50], b[50];
	puts("\nIntroduceti numarul de elemente din vectori\n");
	scanf_s("%d", &n);
	citire(n, a);
	citire(n, b);
	printf("\nProdusul scalar al celor 2 vectori este %d\n", produs_scalar(a, b, n));
	return 0;
}

int produs_scalar(int a[50], int b[50], int n)
{
	if (n > 0)
		return a[n - 1] * b[n - 1] + produs_scalar(a, b, n - 1);
	return 0;
}

void citire(int n, int v[50])
{
	printf("\nIntroduceti numerele pentru vector.\n");
	for (int i = 0; i < n; i++)
	{
		printf("v[%d]= ", i);
		scanf_s("%d", &v[i]);
	}
}

/*
Croitoru Rares, 07.03.2021, grupa 2011
Lab 2 - 7.Să se calculeze suma numerelor impare dintr-un tablou unidimensional de numere întregi în mod
recursiv, tablou citit dintr-un fişier unde,ca primă valoare,avem numărul de elemente ale tabloului.
*/

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

int recursiv(FILE* file, int n);

int main()
{
	errno_t err;
	FILE* file;
	err = fopen_s(&file, "test.txt", "r");
	if (err != 0)
	{
		puts("\nDeschidere fisier nereusita!\n");
		exit(1);
	}
	int n;
	fscanf_s(file, "%d", &n);
	printf("\nSuma elementelor impare din fisier este %d\n", recursiv(file, n));
	if (file)
		fclose(file);
	return 0;
}

int recursiv(FILE* file, int n)
{
	if (n > 0)
	{
		int x;
		fscanf_s(file, "%d", &x);
		if (x % 2)
			return x + recursiv(file, n - 1);
	}
	return 0;
}

/*
Croitoru Rares, 07.03.2021, grupa 2011
Lab 2 - 8.Analog cu problema precedentă, dar se calculează produsul elementelor aflate pe poziţii
impare într-un tablou unidimensional, respectiv să se calculeze suma numerelor prime din tablou.
*/

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

void recursiv(FILE* file, int n, int& suma_prime, int& produs);
bool prim(int x, int i);

int main()
{
	errno_t err;
	FILE* file;
	err = fopen_s(&file, "test.txt", "r");
	if (err != 0)
	{
		puts("\nDeschidere fisier nereusita!\n");
		exit(1);
	}
	int n, suma_prime = 0, produs = 1;
	fscanf_s(file, "%d", &n);
	recursiv(file, n, suma_prime, produs);
	printf("\nProdusul elementelor de pe pozitii impare din fisier este %d\n", produs);
	printf("\nSuma elementelor prime din fisier este %d\n", suma_prime);
	if (file)
		fclose(file);
	return 0;
}

void recursiv(FILE* file, int n, int& suma_prime, int& produs)
{
	if (n > 0)
	{
		int x;
		fscanf_s(file, "%d", &x);
		if (prim(x, 2))
			suma_prime += x;
		if (n % 2)
			produs *= x;
		recursiv(file, n - 1, suma_prime, produs);
	}
	return;
}

bool prim(int x, int i) //i vine cu valoarea 2 din start
{
	if (x == 1 || x == 0)
		return false;
	if (x == 2 || i * i > x)
		return true;
	if (x % i == 0)
		return false;
	if (i == 2)
		return prim(x, 3);
	return prim(x, i + 2);
}

/*
Croitoru Rares, 07.03.2021, grupa 2011
Lab 2 - 9.Folosind o funcție recursivă, calculați suma valorilor introduse de la tastaturăcu confirmare, 
adică cereți utilizatorului să indicedacă mai dorește să mai introducă o nouă valoaresau nu. Modificați 
funcția pentru a calcula și afișa, și media valorilor date de utilizator. Semnalați printr-un mesaj când 
suma valorilor depășește o anumită valoare prestabilită.
*/

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <conio.h>
const int VAL_PRESTABILITA = 10;

void recursiv(long suma, int nr);

int main()
{
	long suma = 0;
	int nr = 0;
	recursiv(suma, nr);
	return 0;
}

void recursiv(long suma, int nr)
{
	int ok = (suma > VAL_PRESTABILITA ? 0 : 1);
	char c;
	long  x;
	puts("\nIntroduceti o valoare.\n");
	scanf_s("%ld", &x);
	suma += x;
	nr++;
	if (suma > VAL_PRESTABILITA && ok)
		printf("\n!!! ATENTIE! SUMA A DEPASIT VALOAREA PRESTABILITA %d !!!\n", VAL_PRESTABILITA);
	printf("\nSuma actuala este %ld\n", suma);
	printf("\nMedia actuala este %lf\n", (double)suma / nr);
	puts("\nDoriti sa mai introduceti o valoare? ESCAPE pentru NU.\n");
	c = _getch();
	if (c != 27)
		recursiv(suma, nr);
}

/*
Croitoru Rares, 07.03.2021, grupa 2011
Lab 2 - 10.Considerați un șir de n (<=30) de valori întregi. Determinați în mod recursiv și nerecursiv
numărul de apariții în șir ale unei valori întregi xcititite de la tastatură.
*/

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int recursiv(int n, int b[50], int x);
int iterativ(int n, int b[50], int x);

int main()
{
	int n, b[50];
	puts("\nIntroduceti numarul de valori din sir.\n");
	scanf_s("%d", &n);
	puts("\nIntroduceti numerele din sir.\n");
	for (int i = 0; i < n; i++)
	{
		printf("v[%d]= ", i);
		scanf_s("%d", &b[i]);
	}
	int x;
	puts("\nIntroduceti o valoare sa fie cautata.\n");
	scanf_s("%d", &x);
	printf("\nValoarea apare de %d ori (RECURSIV).\n", recursiv(n, b, x));
	printf("\nValoarea apare de %d ori (ITERATIV).\n", iterativ(n, b, x));
	return 0;
}

int recursiv(int n, int b[50], int x)
{
	if (n > 0)
		if (b[n - 1] == x)
			return 1 + recursiv(n - 1, b, x);
		else
			return recursiv(n - 1, b, x);
	return 0;
}

int iterativ(int n, int b[50], int x)
{
	int nr = 0;
	for (int i = 0; i < n; i++)
		b[i] == x ? nr++ : true;
	return nr;
}

/*
Croitoru Rares, 07.03.2021, grupa 2011
Lab 2 - 11.Considerați un număr n întreg pozitiv în baza 10 introdus de la tastatură. 
Folosind o funcție recursivă convertiți valoarea n într-o altă bază de numerație 1<b<10 citită de la tastatură.
*/

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

long recursiv(int n, int b);

int main()
{
	int n, b;
	puts("\nIntroduceti numarul in baza 10.\n");
	scanf_s("%d", &n);
	puts("\nIntroduceti o baza b.\n");
	scanf_s("%d", &b);
	printf("\nNumarul in baza %d este %ld\n", b, recursiv(n, b));
	return 0;
}

long recursiv(int n, int b)
{
	if (n > 0)
		return (n % b) + recursiv(n / b, b) * 10;
	return 0;
}

/*
Croitoru Rares, 07.03.2021, grupa 2011
Lab 2 - 12.Fie ecuația de gradul 2:  x2–sx +p=0. Fără a calcula rădăcinile x1 și x2
determinați Sn= x1n+ x2n, folosind reprezentarea recursivăa sumei:
Sum(n) ={ 2,dacă n=0;s,dacăn=1;s*Sum(n-1) –p*Sum(n-2),dacăn>1;}unde s și p sunt  valori  
reale  iar nîntreagă,  introduse de  la tastatură.Verificați dacăe posibil rezultatul obținut
*/

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

double sum(int n, double s, double p);

int main()
{
	int n;
	double s, p;
	printf("\nFie ecuatia: x^2-sx+p=0\n");
	printf("\nn= ");
	scanf_s("%d", &n);
	printf("\ns= ");
	scanf_s("%lf", &s);
	printf("\np= ");
	scanf_s("%lf", &p);
	printf("\nS(%d) = x1^%d+x2^%d = %lf\n", n, n, n, sum(n, s, p));
	return 0;
}

double sum(int n, double s, double p)
{
	if (n == 0)
		return 2;
	if (n == 1)
		return s;
	if (n > 1)
		return s * sum(n - 1, s, p) - p * sum(n - 2, s, p);
}

/*
Croitoru Rares, 07.03.2021, grupa 2011
Lab 2 - 13.Scrieți un program care să calculeze în mod recursiv și în mod nerecursiv valoarea seriei armonice
sn=1/1+1/2+1/3+...1/n,  unde n este  un  număr  natural,  cu  două funcții  diferite. Apelați cele două funcții 
cu diferite valori ale lui n.
*/

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

double recursiv(int n);
double iterativ(int n);

int main()
{
	int n;
	puts("\nIntroduceti numarul de elemente din seria armonica\n");
	scanf_s("%d", &n);
	printf("\nSuma seriei calculata iterativ este %lf\n", iterativ(n));
	printf("\nSuma seriei calculata recursiv este %lf\n", recursiv(n));
	return 0;
}

double recursiv(int n)
{
	if (n > 0)
		return 1.0 / n + recursiv(n - 1);
	return 0;
}

double iterativ(int n)
{
	double s = 0;
	for (int i = 1; i <= n; i++)
		s += 1.0 / i;
	return s;
}