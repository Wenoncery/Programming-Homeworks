/*
Croitoru Rares, 19.03.2021, grupa 2011
Lab 3 - 5.Creaţi un fişier în care stocaţi un şir de numere întregi, generate  in mod aleator. 
Preluaţi prin program aceste valori. Folosiţi metoda divide et imperapentru a determina minimul 
şi maximul din şir şi afisaţi rezultatele pe ecran. Actualizaţi fişierul iniţial adăugând aceste două valori.
*/

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <malloc.h>
#include <stdlib.h>
#include <time.h>

void citire(int* p);
int Random_fisier();
void divide_et_impera(int nr , int* p, int& max, int& min);

int main()
{
	int nr = Random_fisier();
	int* p = (int*)malloc(nr * sizeof(int));
	citire(p);
	int max = -33000, min = 33000;
	divide_et_impera(nr, p, max, min);
	printf("\nAu fost generate %d numere aleatorii si scrise in fisier\n", nr);
	printf("\nMinimul din fisier este %d\n\
		Maximul din fisier este %d\n", min, max);
	if (p)
		free(p);
	return 0;
}

void citire(int* p)
{
	FILE* file;
	errno_t err;
	err = fopen_s(&file, "test.txt", "r");
	if (err != 0)
	{
		puts("Deschidere fisier esuata!");
		exit(1);
	}
	int i = 0;
	while (!feof(file))
		fscanf(file, "%d", (p + (i++)));
	if (file)
		fclose(file);
}

int Random_fisier()
{
	srand((unsigned)time(NULL));
	FILE* file;
	errno_t err;
	err = fopen_s(&file, "test.txt", "w");
	if (err != 0)
	{
		puts("Deschidere fisier esuata!");
		exit(1);
	}
	int nr = rand() % 100 + 1; //maxim 100 numere aleatorii
	for (int i = 0; i < nr; i++)
	{
		int x = rand();
		fprintf(file, "%9d ", x);
		if (i % 10 == 9)
			fputc('\n', file);
	}
	if (file)
		fclose(file);
	return nr;
}

void divide_et_impera(int nr, int* p, int& max, int& min)
{
	if (nr > 0)
	{
		if (*(p + nr-1) > max)
			max = *(p + nr-1);
		if (*(p + nr-1) < min)
			min = *(p + nr-1);
		divide_et_impera(nr - 1, p, max, min);
	}
}

/*
Croitoru Rares, 19.03.2021, grupa 2011
Lab 3 - 6.Scrieţi o aplicaţie  care  determină c.m.m.d.c. dintr-un tablou unidimensional de numere
întregi (max. 2000 de valori), utilizând metoda divide et impera. Elementele tabloului se pot citi
de la tastatură sau dintr-un fisier
*/

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <malloc.h>
#include <stdlib.h>

int citire(int* p);
int cmmdc_total(int* p, int n);
int cmmdc(int a, int b);

int main()
{
	int* p;
	if (p = (int*)malloc(2000 * sizeof(int)));
	else
	{
		puts("Alocare nereusita!");
		exit(1);
	}
	int n = citire(p);
	printf("Cmmdc al numerelor din fisier este %d", cmmdc_total(p, n));
	if (p)
		free(p);
	return 0;
}

int citire(int* p)
{
	FILE* file;
	errno_t err;
	err = fopen_s(&file, "test.txt", "r");
	if (err != 0)
	{
		puts("Deschidere fisier esuata!");
		exit(1);
	}
	int i = 0;
	while (!feof(file))
		fscanf(file, "%d", (p + (i++)));
	if (file)
		fclose(file);
	return i;
}

int cmmdc_total(int* p, int n)
{
	int x = *p;
	for (int i = 1; i < n; i++)
		x = cmmdc(x, *(p + i));
	return x;
}

int cmmdc(int a, int b)
{
	if (a != b)
		if (a > b)
			return cmmdc(a - b, b);
		else
			return cmmdc(a, b - a);
	return a;
}

/*
Croitoru Rares, 19.03.2021, grupa 2011
Lab 3 - 7.Să se calculeze ∫ab1/(1+x2)dx, cu ajutorul metodei trapezelor, astfel încât inălţimea
fiecărui trapez acărui arie se  însumeazăsăfie  mai  micădecât ε=0.0001.  Aria  trapezului  cu 
vârfurile  în  punctele  (a,0),  (b,0),  (a,f(a)) şi (b,f(b)) este (b-a)*(f(a)+f(b))/2, iar f(x)=1/(1+x2). 
Se citesc de la tastaturănumerele reale a şi b, a≤b. Utilizaţi metoda divide et impera.
*/

#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<conio.h>
#include<iostream>

using namespace std;

const double eps = 0.0001;

double funct(double x);
double Integrala(double a, double b, double eps, double(*fct)(double));

int main()
{
	double a, b;
	cout << "\na="; cin >> a;
	cout << "\nb="; cin >> b;
	cout << "\nIntegrala functiei:" << Integrala(a, b, eps, funct);
	_getch();
}

double Integrala(double a, double b, double eps, double(*fct)(double x))
{
	double m;
	double s1, s2;
	if (b - a < eps)
		return(fct(a) + fct(b)) * (b - a) / 2.0;
	else
	{
		m = (a + b) / 2.0; s1 = Integrala(a, m, eps, fct);
		s2 = Integrala(m, b, eps, fct);
		return s1 + s2;
	}
}

double funct(double x)
{
	return 1 / (1 + x * x);
}

/*
Croitoru Rares, 19.03.2021, grupa 2011
Lab 3 - 8.Să se scrie o aplicație C/C++ care să genereze aleator maxim 10  valori întregi,  ce vor fi 
memorate  într-un tablou  unidimensional. Să se verifice dacă o altă valoare generată aleator aparține 
acestui tablou,  utilizând funcția _lsearch().
*/

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <malloc.h>
#include <stdlib.h>
#include <time.h>
#include <search.h>

void getRandom(int* p, int nr);
int  compare(const  void* a, const  void* b);

int main()
{
	srand((unsigned)time(NULL));
	int nr = rand() % 10 + 1; //maxim 10 numere aleatorii
	int* p = (int*)malloc((nr + 1) * sizeof(int)); //alocam spatiu pentru nr+1 elemente, deoarece _lsearch adauga inca o valoare
	getRandom(p, nr);
	printf("\nAu fost generate %d numere aleatorii\n", nr);
	int x = rand();
	printf("\nO alta valoare generata aleator este %d\n", x);
	*(p + nr) = -1;
	int* sol = nullptr;
	if (p)
		sol = (int*)_lsearch(&x, p, (size_t*)&nr, sizeof(int), (int(*)  (const  void*, const  void*))compare);
	if (*(p + nr) == -1)
		printf("\nNumarul %d a fost gasit in sir\n", x);
	else
		printf("\nNumarul %d nu a fost gasit in sir, dar a fost aduagat acum\n", x);
	if (p)
		free(p);
	return 0;
}

void getRandom(int* p, int nr)
{
	for (int i = 0; i < nr; i++)
	{
		int x = rand();
		*(p + i) = x;
	}
}

int  compare(const  void* a, const  void* b)
{
	return  (*(int*)a - *(int*)b);
}

/*
Croitoru Rares, 19.03.2021, grupa 2011
Lab 3 - 10.Citiți de la intrarea standard un tablou unidimensional de maxim 20 de valori întregi.
Folosind mecanismul de căutare binară, determinați dacă o nouă valoare, a,introdusă de la tastatură 
există în șir. Dacă da, determinați toți factorii primi ai acestei valori pe care îi veți  afișa pe ecran
*/

#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>

void factori_primi(int x);
int search(int a[], int n, int nr);
int comp_int(const void* a, const void* b);

int main()
{
	int a[20], n;
	puts("\nn=");
	scanf_s("%d", &n);
	for (int i = 0; i < n; i++)
	{
		printf("\na[%d]=", i);
		scanf_s("%d", &a[i]);
	}
	qsort(a, (size_t)n, sizeof(int), comp_int);
	int nr;
	puts("\nnr=");
	scanf_s("%d", &nr);
	int poz = -1;
	poz = search(a, n, nr);
	if (poz == -1)
		printf("\nValoarea %d nu face parte din sir\n", nr);
	else
	{
		printf("\nValoarea %d face parte din sir si a fost gasita la pozitia %d\n", nr, poz);
		factori_primi(nr);
	}
	return 0;
}

int comp_int(const void* a, const void* b)
{
	return (*(int*)a - *(int*)b);
	//ascending
}

int search(int a[], int n, int nr)
{
	int i;
	if (n == 0)
		return 0;
	else
	{
		if (nr > (int)n / 2)
		{
			for (i = n / 2; i < n; i++)
				if (nr == a[i])
				{
					return nr;
					break;
				}
			return search(a, n / 2, nr);
		}
		else
		{
			for (i = 0; i < n / 2; i++)
				if (nr == a[i])
				{
					return nr;
					break;
				}
			return search(a, n / 2, nr);
		}
	}
}

void factori_primi(int x)
{
	int d = 2;
	while (x != 1)
	{
		int nr = 0;
		if (x % d == 0)
		{
			while (x % d == 0)
			{
				x /= d;
				nr++;
			}
			printf("\n%d^%d", d, nr);
		}
		d++;
	}
}

/*
Croitoru Rares, 19.03.2021, grupa 2011
Lab 3 - 11.Folosind  un  fișier care conține numere realeordonate, căutați o valoare reală a 
introdusă de la tastatură în cadrul șirului, folosind algoritmul de căutare binară iterativ, 
recursiv și funcția de bibliotecă bsearch(). Afișați șirul citit, valoarea ași poziția folosind 
cei trei algoritmi specificați. 
*/

#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>
#define DIM 100

void afisare(float x[], int n);
int binar_iterativ(float x[], int n, float val);
void ordonare(float x[], int n);
float binar_recursiv(float x[], int n, float val);
int comparison_for_bsearch(float* x, float* y);

int main()
{
	FILE* file;
	int n = 0;
	float x[DIM], a, * result;
	file = fopen("test.txt", "r");
	if (file == NULL)
	{
		printf("FAILED TO OPEN");
		exit(1);
	}
	while (!feof(file))
	{
		fscanf(file, "%file", &x[n]);
		n++;
	}
	printf("The values from the file have been succesfully copied in the array");
	fclose(file);
	printf("\nThis is the array:\n");
	afisare(x, n);
	printf("\n\nGive 'a': "); scanf("%f", &a);
	printf("\n\t\tBinary iterative: \n");
	if (binar_iterativ(x, n, a) == -1)
		printf("\tThe value '%.2f' is not in the array!", a);
	else
		printf("\tThe value '%.2f' is in the array!", a);
	ordonare(x, n);
	n--;
	printf("\n\n\t\tBinary recursive: \n");
	if (binar_recursiv(x, n, a) == a)
		printf("\tThe value '%.2f' is in in the array!", a);
	else
		printf("\tThe value '%.2f' is not in the array!", a);
	n++;
	result = (float*)bsearch(&a, x, n, sizeof(float), (int(*) (const void*, const void*))comparison_for_bsearch);
	printf("\n\n\t\tbsearch function: \n");
	if (result)
		printf("\tThe value '%.2f' is in the array!", a);
	else
		printf("\tThe value '%.2f' is not in the array!", a);
	return 0;
}

void afisare(float x[], int n)
{
	int i;
	for (i = 0; i < n; i++)
		printf("%.2f ", x[i]);
}

int binar_iterativ(float x[], int n, float val)
{
	int inc, sfr, mij;
	inc = 0;
	sfr = n - 1;
	mij = (inc + sfr) / 2;
	while ((inc <= sfr) && (val != x[mij]))
	{
		if (val < x[mij])
			sfr = mij - 1;
		else
			inc = mij + 1;
		mij = (inc + sfr) / 2;
	}
	if (x[mij] == val)
		return mij;
	else
		return -1;
}

void ordonare(float x[], int n)
{
	float aux;
	int i, j;
	for (i = 0; i < n; i++)
		for (j = i + 1; j < n; j++)
		{
			if (x[i] > x[j])
			{
				aux = x[i];
				x[i] = x[j];
				x[j] = aux;
			}
		}
}

float binar_recursiv(float x[], int n, float val)
{
	int i;
	if (n == 0)
		return -1;
	else
	{
		if (x[n / 2] != val)
		{
			if (val > x[n / 2])
			{
				for (i = (n / 2) + 1; i <= n; i++)
					if (x[i] == val)
					{
						return x[i];
						break;
					}
			}
			else
			{
				for (i = 1; i <= (n / 2); i++)
					if (x[i] == val)
					{
						return x[i];
						break;
					}
			}
		}
		else
			return x[n / 2];
		return binar_recursiv(x, n / 2, val);
	}
}

int comparison_for_bsearch(float* x, float* y)
{
	if (*x < *y) return -1;
	if (*x > *y) return 1;
	return 0;
}

