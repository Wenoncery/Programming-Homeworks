/*
Croitoru Rares, 08.04.2021, grupa 2011
Lab 6 - 1.Să  se  scrie  o  aplicaţie C++ care  implementează  o  clasă  numită PilotF1. 
Clasa definește variabilele private nume(șir de caractere), echipa(șir de caractere), 
varsta(int),record(int), nr_pole_position(int). Ca  membri  publici,  clasa  conține  
metode  accesor/getterși mutator/setterdistincte pentru fiecare din atributele clasei.
In funcția main(), să se creeze 3 instanțe distincte ale clasei PilotF1și să se folosească 
metodele   mutator/setterpentru  a  inițializa  datele  din  fiecare  obiect  cu  informația 
corespunzătoare citită de la tastatură. Folosind metodele accesor/getter, să se afișeze toate
datele pilotului cu cel mai bun record.
*/

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>

using namespace std;
const int DIM = 100;

class PilotF1 {
private:
	char nume[DIM];
	char echipa[DIM];
	int varsta;
	int record;
	int nr_pole_position;
public:
	void setNume(char nume[DIM]) {
		strcpy(nume, nume);
	}
	void setEchipa(char echipa[DIM]) {
		strcpy(echipa, echipa);
	}
	void setVarsta(int varsta) {
		varsta = varsta;
	}
	void setRecord(int time) {
		record = time;
	}
	void setPozitia(int position) {
		nr_pole_position = position;
	}
	char* getNume() {
		return nume;
	}
	char* getEchipa() {
		return echipa;
	}
	int getVarsta() {
		return varsta;
	}
	int getRecord() {
		return record;
	}
	int getPozitia() {
		return nr_pole_position;
	}
};

void citire(class PilotF1* sir, int n);
int best(class PilotF1* sir, int n);
void afisare(class PilotF1 sofer);

int main()
{
	int n = 3;
	cout << "\nVor fi 3 piloti:\n\n";
	PilotF1* sir = new PilotF1[n];
	citire(sir, n);
	cout << "\nCel mai bun timp: " << ' ' << best(sir, n);
	for (int i = 0; i < n; i++) {
		if (sir[i].getRecord() == best(sir, n)) {
			cout << "\nSoferul cu cel mai bun timp: \n" << endl;
			afisare(sir[i]);
		}
	}
	return 0;
}

void citire(class PilotF1* sir, int n) {
	char tempNume[DIM];
	char tempEchipa[DIM];
	int tempVarsta;
	int tempTime;
	int tempPozitia;
	for (int i = 0; i < n; i++) {
		cout << "\nnume: ";
		cin >> tempNume;
		sir[i].setNume(tempNume);
		cout << "echipa: ";
		cin >> tempEchipa;
		sir[i].setEchipa(tempEchipa);
		cout << "varsta: ";
		cin >> tempVarsta;
		sir[i].setVarsta(tempVarsta);
		cout << "Record: ";
		cin >> tempTime;
		sir[i].setRecord(tempTime);
		cout << "numar pole_position: ";
		cin >> tempPozitia;
		sir[i].setPozitia(tempPozitia);
	}
}

int best(PilotF1* sir, int n) {
	int timpmax = INT_MAX;
	for (int i = 0; i < n; i++) {
		if (sir[i].getRecord() < timpmax) timpmax = sir[i].getRecord();
	}
	return timpmax;
}

void afisare(class PilotF1 sofer) {
	cout << "\nNume: " << sofer.getNume();
	cout << "\nEchipa: " << sofer.getEchipa();
	cout << "\nVarsta: " << sofer.getVarsta();
	cout << "\nPole position: " << sofer.getPozitia();
}

/*
Croitoru Rares, 08.04.2021, grupa 2011
Lab 6 - 2.Să se modifice exemplul 2 astfel încât codulsă poată fi lansat în 
execuție considerand atributul clasei private.
*/

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>

using namespace std;

class Test2 
{
	int x;
public:
	Test2() 
	{
		cout << "\nApel constructor explicit vid.";
	}
	void setX(int x) 
	{
		this->x = x;
	}
};

int main() 
{
	Test2 ob1; //instantierea functioneaza deoarece constructorul este public
	int a;
	cout << "\nIntroduceti valoarea variabilei de tip \"int\" din clasa: ";
	cin >> a;
	ob1.setX(a);
	return 0;
}

/*
Croitoru Rares, 08.04.2021, grupa 2011
Lab 6 - 3.Pornind  de la exemplul care tratează lucrul cu matricein  varianta  transformata 
cu  alocare dinamica, completați codul scris cu metodele specifice pentru:
-afișarea elementelor de pe diagonala secundara a matricei, dacă matricea este pătratică; în caz contrar se afișează 
un mesaj corespunzător;
-afișarea elementelor de sub diagonala principala;
-afișarea unei matrice de dimensiunea celei inițiale ale cărei elemente pot avea valori de 0 (dacă elementul corespunzător 
este mai mare decât o valoare citita) sau 1(în caz contrar);
*/

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>

using namespace std;

const int MAX1 = 20;
const int MAX2 = 20;

class Matrix
{
private:
	int m, n;
	int tab[MAX1][MAX2];

public:
	int getLine()
	{
		return m;
	}
	int getCol()
	{
		return n;
	}
	void setCol(int x)
	{
		m = x;
	}
	void setLin(int x)
	{
		n = x;
	}
	void citMat();
	void afisMat();
	void diagsec();
	void diagprinc();
	void compare(int key);
};

void Matrix::citMat()
{
	for (int i = 0; i < m; i++)
		for (int j = 0; j < n; j++)
		{
			cout << "\ntab[" << i << "][" << j << "]= ";
			cin >> tab[i][j];
		}
}

void Matrix::diagprinc()
{
	if (m == n)
	{
		cout << "\nElementele de pe diag principala: \n";
		for (int i = 0; i < m; i++)
			cout << tab[i][i] << endl;
	}
	else 
		puts("\nMatricea nu e patratica, nu are diagonala principala!");
}

void Matrix::diagsec()
{
	if (m == n)
	{
		cout << "\nElemente de sub diagonala secundara: \n";
		for (int i = 0; i < m; i++)
			for (int j = 0; j < n; j++)
				if (i > n - j - 1)
					cout << tab[i][j] << endl;
	}
	else 
		cout << "\nMatricea nu e patratica, nu are diagonala secundara!";
}

void Matrix::compare(int key)
{
	cout << "\ntest comparare: \n";
	for (int i = 0; i < m; i++)
	{
		for (int j = 0; j < n; j++)
			if (tab[i][j] > key)
				cout << 0 << " ";
			else
				cout << 1 << " ";
		cout << "\n";
	}
}

void Matrix::afisMat()
{
	cout << "\nMatricea este: \n";
	for (int i = 0; i < m; i++)
	{
		for (int j = 0; j < n; j++)
			cout << tab[i][j] << " ";
		cout << endl;
	}
}

int main()
{
	Matrix mat;
	cout << " \nIntr dimensiunile matricei:";
	int x, y;
	cin >> x >> y;
	mat.setLin(x);
	mat.setCol(y);
	mat.citMat();
	mat.afisMat();
	cout << " \nIntroduceti cheia: ";
	int key;
	cin >> key;
	mat.compare(key);
	mat.diagprinc();
	mat.diagsec();
	return 0;
}

/*
Croitoru Rares, 08.04.2021, grupa 2011
Lab 6 - 4.Să se scrie o clasă care are ca variabilă privată un câmp de tip dată, definit 
într-o structură externă  clasei  (zi –int,  luna –int,  an -int). Clasa  conține  metode 
mutator/setterși accesor/getter(publice) pentru informația privată.In clasă se mai află 
doua metode publice care:
-testează validitatea datei stocate;
-scrie  într-un fișier toate datele din anul curent care preced (cronologic) data stocată în clasă;
In functiamain(), după instanțierea clasei și citirea de la tastatură a componentelor unei date, 
să se apeleze metodele membre și apoi să se verifice rezultatele obținute.
*/

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>

using namespace std;

struct data_calendar {
	int ziua;
	int luna;
	int anul;
};

class Clasa {
private:
	data_calendar data;
public:
	int getZiua() {
		return data.ziua;
	}
	int getLuna() {
		return data.luna;
	}
	int getAnul() {
		return data.anul;
	}
	void setZiua(int d) {
		data.ziua = d;
	}
	void setLuna(int m) {
		data.luna = m;
	}
	void setAnul(int y) {
		data.anul = y;
	}
	void Validitate();
	void scrieFisier();
};

void Clasa::Validitate() {
	if (data.luna < 1 || data.luna>12) {
		cout << "\nluna number is not valid";
		exit(1);
	}
	if (data.anul > 2019) {
		cout << "\nThe anul is not valid";
		exit(1);
	}
	if ((data.luna == 4) || (data.luna == 6) || (data.luna == 9) || (data.luna == 11)) {
		if ((data.ziua < 1) || (data.ziua > 30)) {
			cout << "\ndata number is not valid!";
			exit(1);
		}
	}
	if (data.luna == 2) {
		if ((data.anul % 4 == 0) && (data.anul % 100 == 0) && (data.anul % 400 != 0)) {
			if ((data.ziua < 1) || (data.ziua > 29)) {
				cout << "\ndata number is not valid!";
				exit(1);
			}
		}
		else {
			if (data.ziua < 1 || data.ziua>28) {
				cout << "\ndata number is not valid!";
				exit(1);
			}
		}
	}
}
void Clasa::scrieFisier() {
	FILE* fis;
	errno_t err;
	err = fopen_s(&fis, "test.txt", "w+");
	if (err)
	{
		cout << "\nEroare deschidere fisier!\n";
		exit(1);
	}
	fprintf(fis, "Datele sunt:");
	fprintf(fis, "\nziua: %d", data.ziua);
	fprintf(fis, "\nluna: %d", data.luna);
	fprintf(fis, "\nanul: %d", data.anul);
	cout << "\nDatele au fost stocate in fisier";
	fclose(fis);
}

int main() {
	Clasa var;
	cout << "Intr data: ";
	int a, b, c;
	cout << "\nziua: ";
	cin >> a;
	cout << "luna: ";
	cin >> b;
	cout << "anul: ";
	cin >> c;
	var.setZiua(a);
	var.setLuna(b);
	var.setAnul(c);
	var.Validitate();
	var.scrieFisier();
	return 0;
}

/*
Croitoru Rares, 08.04.2021, grupa 2011
Lab 6 - 6.Să  se  scrie o  aplicaţie  C++  care  implementează  o  clasă  numită Triunghi. 
Clasa  cuprindeatributele  private  pentru  laturile a,b,c, un  constructor  cu  parametrii, 
metode  setter  si  getter adecvate.Calculați aria și perimetrul prin metode specificeclasei. 
Scrieți o metodă care să indice dacă triunghiul este dreptunghic sau nu.Definiti o metoda 
private cu parametrii inclasa carepermite verificarea condiției ca laturile să formeze un 
triunghi.Ea  va  fi  folosita  si  de metodele setter.
*/

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>

using namespace std;

class Triunghi
{
private:
	int a, b, c;
	int valid();
public:
	void setABC(int a, int b, int c)
	{
		if (valid) {
			this->a = a;
			this->b = b;
			this->c = c;
		}
	}
	int perimetru()
	{
		return a + b + c;
	}
	double aria()
	{
		double semip = (double)perimetru() / 2.0;
		return sqrt(semip * (semip - a) * (semip - b) * (semip - c));
	}
	void triDrept()
	{
		if ((a * a == b * b + c * c) || (b * b == a * a + c * c) || (c * c == a * a + b * b))
			cout << "\Triunghiul e dreptunghic\n";
	}
};

int Triunghi::valid()
{
	if ((a < b + c) && (b < a + c) && (c < a + b))
		return 1;
	else
		return 0;
};

int main()
{
	Triunghi tri;
	int a, b, c;
	cout << "Intr dimensiunile triunghiului:\n";
	cin >> a >> b >> c;
	tri.setABC(a, b, c);
	tri.triDrept();
	cout << "Perimetrul: " << tri.perimetru() << endl;
	cout << "Aria: " << tri.aria() << endl;
	return 0;
}

/*
Croitoru Rares, 08.04.2021, grupa 2011
Lab 6 - 7.Să se scrie clasaSeif, cu atributele private cifru și suma.Descrieți metodele private
getSuma()și setSuma()și metodele publice puneInSeif()și scoateDinSeif()cu care să accesați suma
de bani care se află în seif.Metoda puneInSeif(  ) poate apela getSuma() șisetSuma(),metoda 
scoateDinSeif(  )poateapela getSuma()șisetSuma().Instanțiațiobiecte  din clasa Seif,  iar metodele
puneInSeif( ) șiscoateDinSeif( ) vor putea accesa suma doar dacăparametrul de tip cifru utilizat 
corespunde obiectului instanțiat. În caz de diferențăde cifru, se va da un mesaj.
*/

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>

using namespace std;

class Seif 
{
private:
	int cifru = 1234;
	int suma = 0;
	int getSuma()
	{
		return suma;
	}
	void setSuma(int suma)
	{
		this->suma += suma;
	}
public:
	void scoateDinSeif(int cifru)
	{
		if (this->cifru == cifru) cout << "Aveti in seif:" << ' ' << Seif::getSuma();
		else
		{
			cout << "\nCifru gresit!";
			exit(1);
		}
	}
	void puneInSeif(int cifru, int noua_suma) 
	{
		if (this->cifru == cifru) 
			setSuma(noua_suma);
		else
		{
			cout << "\nCifru gresit!";
			exit(1);
		}
	}
};

int main()
{
	Seif seifx;
	int cifru;
	cout << "\nIntroduce cifru: ";
	cin >> cifru;
	seifx.puneInSeif(cifru, 50);
	seifx.scoateDinSeif(cifru);
	return 0;
}