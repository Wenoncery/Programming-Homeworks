/*
Croitoru Rares, program care calculeaza produsul scalar a 2 vectori (folosind pointeri)
05.12.2020, grupa 2011
*/

#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>

const int DIM = 100;

void citire(int n, int* v);
int scalar(int n, int* v1, int* v2);

int main()
{
	int* p1, * p2;
	int n, vec1[DIM]{}, vec2[DIM]{};
	p1 = vec1;
	p2 = vec2;
	printf("\nIntroduceti numarul de elemente din vectori: "); 
	scanf_s("%d", &n);
	citire(n, p1);
	citire(n, p2);
	printf("\nProdusul scalar al celor 2 vectori este: %d\n", scalar(n, p1, p2));
	return 0;
}

void citire(int n, int* v)
{
		printf("\nIntroduceti cele %d elemente ale vectorului.\n", n);
		for (int i = 0; i < n; i++)
		{
			printf("V[%d]= ", i);
			scanf_s("%d", (v + i));
		}
}

int scalar(int n, int* v1, int* v2)
{
	if (n > 0)
		return scalar(n - 1, v1, v2) + (*(v1 + n - 1)) * (*(v2 + n - 1));
	return 0;
	/*
	int sum = 0;
	for (int i = 0; i < n; i++)
		sum += (*(v1 + i)) * (*(v2 + i));
	return sum;
	*/
}

/*
Croitoru Rares, program care genereaza 20 numere mai mici decat 50, le afiseaza,
elimina numerele impare din sir si afiseaza noul sir (folosind pointeri)
05.12.2020, grupa 2011
*/
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int* getRandom(); // function to generate and return random numbers
void afisare(int* v, int n);
void eliminare(int* v, int& n);

int main()
{
	int* p, n = 20; //se genereaza n=20 numere random
	p = getRandom();
	printf("\nCele %d numere  mai mici decat 50 generate random sunt:\n", n);
	afisare(p, n);
	eliminare(p, n);
	printf("\nSirul cu %d numere, dupa eliminarea numerelor impare este:\n", n);
	afisare(p, n);
	return 0;
}

int* getRandom()
{
	static int r[20]; //must be static
	int i;
	srand((unsigned)time(NULL)); //set the seed
	for (i = 0; i < 20; i++)
		r[i] = rand() % 50; //generate random numbers smaller than 50
	return r;
}

void afisare(int* v, int n)
{
	for (int i = 0; i < n; i++)
		printf("V[%d]= %d\n", i, *(v + i));
}

void eliminare(int* v, int& n)
{
	for (int i = 0; i < n; i++)
		if (*(v + i) % 2 != 0)
		{
			for (int j = i; j <= 20; j++)
				*(v + j) = *(v + j + 1);
			i--;
			n--;
		}
}

/*
Croitoru Rares, program care creeaza un tablou unidimensional cu elementele mai mari decat media din primul tablou (pointeri)
05.12.2020, grupa 2011
*/

#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>

const int DIM = 100;

void citire(int n, double* v);
double medie(int n, double* v);
int nou(int n, double* v1, double* v2);
void afisare(int n, double* v);

int main()
{
	double* p1, * p2;
	int n;
	double vec1[DIM]{}, vec2[DIM]{};
	p1 = vec1;
	p2 = vec2;
	printf("\nIntroduceti numarul de elemente din tablou: "); 
	scanf_s("%d", &n);
	citire(n, p1);
	int m = nou(n, p1, p2);
	printf("\nCele %d elemente ale primului tablou sunt:\n", n);
	afisare(n, p1);
	printf("\nCele %d elemente ale noului tabloum, mai mari decat media din primul tablou, sunt:\n", m);
	afisare(m, p2);
	return 0;
}

void citire(int n, double* v)
{
		printf("\nIntroduceti cele %d elemente ale vectorului.\n", n);
		for (int i = 0; i < n; i++)
		{
			printf("V[%d]= ", i);
			scanf_s("%lf", (v + i));
		}
}

double medie(int n, double* v)
{
	double sum = 0;
	int nr = 0;
	for (int i = 0; i < n; i++)
	{
		sum += *(v + i);
		nr++;
	}
	return (double)sum/nr;
}

int nou(int n, double* v1, double* v2)
{
	int j = 0;
	double med = medie(n, v1);
	for (int i = 0; i < n; i++)
		if (*(v1 + i) > med)
			*(v2 + (j++)) = *(v1 + i);
	return j;
}

void afisare(int n, double* v)
{
	for (int i = 0; i < n; i++)
		printf("V[%d]= %lf\n", i,*(v+i));
}

/*
Croitoru Rares, program care citeste un sir de caractere si elimina caracterele care se repeta (folosind pointeri)
05.12.2020, grupa 2011
*/

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

void eliminare(char* v);

int main()
{
	char* p;
	char s[100];
	printf("\nIntroduceti un sir de caractere, fara saptii:\n");
	p = s;
	scanf("%s", p);
	eliminare(p);
	printf("\nSirul cel nou este:\n%s\n", p);
	return 0;
}

void eliminare(char* v)
{
	for (unsigned int i = 0; i < strlen(v); i++)
		for (unsigned int j = i + 1; j < strlen(v); j++)
			if (*(v + i) == *(v + j))
			{
				for (unsigned int k = j; k < strlen(v); k++)
					*(v + k) = *(v + k + 1);
				j--;
			}
}

/*
Croitoru Rares, program care citeste 2 siruri de caractere si afiseaza numarul de caractere care difera
05.12.2020, grupa 2011
*/

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

int diferit(char* v1, char* v2);

int main()
{
	char* p1, * p2;
	char s1[100], s2[100];
	printf("\nIntroduceti primul sir de caractere:\n");
	gets_s(s1);
	printf("\nIntroduceti al doilea sir de caractere:\n");
	gets_s(s2);
	p1 = s1;
	p2 = s2;
	printf("\nSunt %d caractere diferite in cele 2 siruri.\n", diferit(p1, p2));
	return 0;
}

int diferit(char* v1, char* v2)
{
	int nr1 = 0, nr2 = 0, ok;
	for (unsigned int i = 0; i < strlen(v1); i++)
	{
		ok = 0;
		for (unsigned int j = 0; j < strlen(v2); j++)
			v2[j] == v1[i] ? ok = 1 : true;
		ok == 0 ? nr1++ : true;
	}
	for (unsigned int i = 0; i < strlen(v2); i++)
	{
		ok = 0;
		for (unsigned int j = 0; j < strlen(v1); j++)
			v2[i] == v1[j] ? ok = 1 : true;
		ok == 0 ? nr2++ : true;
	}
	return nr1 + nr2;
}

/*
Croitoru Rares, program care afişează caracterele ce compun un şir şi numărul de apariţii ale fiecăruia (folosind pointeri)
05.12.2020, grupa 2011
*/

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

const int n = 100;

void facere(char* v);

int main()
{
	char* p1;
	char s1[n];
	printf("\nIntroduceti sirul de caractere:\n");
	gets_s(s1);
	p1 = s1;
	facere(p1);
	return 0;
}

void facere(char* v)
{
	int nr;
	for (unsigned int i = 0; i < strlen(v); i++)
	{
		nr = 1;
		for (unsigned int j = i + 1; j < strlen(v); j++)
			if (*(v + i) == *(v + j))
			{
				for (unsigned int k = j; k < strlen(v); k++)
					*(v + k) = *(v + k + 1);
				nr++;
				j--;
			}
		printf("\nCaracter: %c apare de %d ori.\n", *(v + i), nr);
	}
}